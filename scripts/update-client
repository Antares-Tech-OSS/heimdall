#!/usr/bin/env node

require('app-module-path').addPath(__dirname + '/../../../');

var minimist      = require('minimist');
var mongoose      = require('apps/auth/common/db/mongoose');
var emitter       = mongoose.emitter;
var colors        = require('colors');
var path          = require('path');
var crypto        = require('crypto');
var model         = require('apps/auth/models/clients');
var client_schema = require('apps/auth/common/db/client-schema');
var locals        = require('common/kv');
var promise       = require('bluebird');

var mongo_url     = 'mongodb://localhost:27017/heimdallr?maxPoolSize=10';
var optional      =
`
	PARAM                 VALUE      TYPE   | Example
	--------------------------------------------------------------------
	--sso-req             <sso-req>  String | facebook+google
	--logo-uri            <logo-uri> String | https://urltoimage.com`;

var args    = minimist (process.argv.slice(2));

var params  = {};

function usage () {
	console.log (`Usage : ${path.basename (process.argv[1])} [ options ]`);
	console.log ('        --cid        (MANDATORY) : client id');
	console.log ('        --app-name   (OPTIONAL)  : name of the client application');
	console.log ('        --cb-url     (OPTIONAL)  : fully qualified URL of the application callback (from auth server)');
	console.log ('        --contact    (OPTIONAL)  : contact person name');
	console.log ('        --sso        (OPTIONAL)  : a "+" separated list of the following keywords');
	console.log ('                                     - local');
	console.log ('                                     - anon');
	console.log ('        --logo-url   (OPTIONAL)  : url for the application logo');
	console.log ('        --trusted    (OPTIONAL)  : "yes" or "no"');

	process.exit (1);
}

function check_mandatories(key) {
	if (!args[key]) {
		console.log (colors.red (`Missing `) +  `: ${key} param mandatory`);
		usage ();
	}
}

check_mandatories ('cid');

if (args['app-name'])
	params.display_name = args['app-name'];

if (args['cb-url']) {
	params.callback_url = args['cb-url'].indexOf(',') < 0 ?
		[args['cb-url']] :
		args['cb-url'].split(',');
}


if (args['contact']) {
	params.contact = args.contact.indexOf(',') < 0 ?
		[args.contact] :
		args.contact.split(',');
}

if (args['sso']) {
	var __sso = args['sso'].split ('+');
	var bad_sso = __sso.find(function (el) { return (el !== 'local' && el != 'anon')});
	if (bad_sso)
		usage ();
	params.sso_req = __sso;
}

if (args['logo-url']) {
	params.logo_uri = args['logo-uri'].indexOf(',') < 0 ?
		[args['logo-uri']] :
		args['logo-uri'].split(',');
}

if (args['trusted'])
	params.trusted = args['trusted'];

if (Object.keys (params).length === 0) {
	console.log ('\nWhat ' + colors.red ('do') + ' you want to update, my lost friend ?\n');
	usage ();
}

console.log (colors.red ('sending the following parameters for update :'));
Object.keys (params).forEach(function (curr) { console.log (`  ${colors.red('=>')} ${curr}`)});
console.log ();

emitter.on ('heimdallr.mongo.connected', function () {
	
	model.update_client  (args['cid'], params, function (err, client) {
		if (err) {
			if (err.message)
				console.log (`${colors.red("error")} : ${err.message}`);
			else
				console.log (`${colors.red("error")} : ${err}`);

			process.exit (1);
		}

		console.log (colors.green(`client ${args['cid']} updated ok`));
		console.log (JSON.stringify (client, null, 2));
		process.exit (0);
	});
});
