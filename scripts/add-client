#!/usr/bin/env node

require('app-module-path').addPath(__dirname + '/../../../');

var minimist      = require('minimist');
var mongoose      = require('apps/auth/common/db/mongoose');
var emitter       = mongoose.emitter;
var colors        = require('colors');
var path          = require('path');
var crypto        = require('crypto');
var model         = require('apps/auth/models/clients');
var client_schema = require('apps/auth/common/db/client-schema');
var locals        = require('common/kv');
var promise       = require('bluebird');

var mongo_url     = 'mongodb://localhost:27017/heimdallr?maxPoolSize=10';
var args    = minimist (process.argv.slice(2));

var params  = {};

function usage () {
	console.log (`Usage : ${path.basename (process.argv[1])} [ options ]`);
	console.log ('        --type       (MANDATORY) : "web"');
	console.log ('        --app-name   (MANDATORY) : name of the client application');
	console.log ('        --cb-url     (MANDATORY) : fully qualified URL of the application callback (from auth server)');
	console.log ('        --contact    (MANDATORY) : contact person name');
	console.log ('        --cid        (OPTIONAL)  : specify the client id');
	console.log ('        --secret     (OPTIONAL)  : specify the client secret');
	console.log ('        --sso        (OPTIONAL)  : a "+" separated list of the following keywords');

	process.exit (1);
}

params.trusted_client = true;
if (!args.trusted)
	params.trusted_client = false;

if (Object.keys(args).length < 2) {
	usage ();
}

function check_mandatories(key) {
	if (!args[key]) {
		console.log (colors.red (`Missing `) +  `: ${key} param mandatory`);
		usage ();
	}

	if (typeof args[key] !== 'string') {
		console.log (colors.red (`Bad format for argument `) +  `--${key}. Should be a string`);
		usage ();
	}
}

check_mandatories ('type');
check_mandatories ('app-name');
check_mandatories ('cb-url');
check_mandatories ('contact');

function gen_random_str (len, encode, suffix) {

	var supported = ['hex', 'base64'];
	var random_str = '';

	if (typeof len === 'string') {
		suffix = supported.indexOf(len) > -1 ? undefined : len;
		encode = suffix ? 'base64' : len;
		len = 32;
	}

	if (typeof len !== 'number')
		throw new Error ('len must be a typeof number');

	if (typeof encode !== 'string')
		throw new Error ('encode must be a typeof string');
	if (supported.indexOf(encode)<0)
		encode='base64';

	if (typeof suffix !== 'string')
		suffix = undefined;

	try {
		random_str = crypto.randomBytes(len).toString(encode);
	}
	catch (ex) {
		throw ex;
	}

	if (suffix)
		return random_str + '-' + suffix;
	return random_str;
}

emitter.on ('heimdallr.mongo.connected', function () {
	
	if (args['sso'] && typeof args['sso'] === 'string')
		args['sso'] = args['sso'].split('+');

	if (args['logo-uri'] && typeof args['logo-uri'] === 'string')
		args['logo-uri'] = args['logo-uri'].indexOf(',') < 0 ?
			[args['logo-uri']] :
			args['logo-uri'].split(',');

	args.contact = args.contact.indexOf(',') < 0 ?
		[args.contact] :
		args.contact.split(',');

	args['cb-url'] = args['cb-url'].indexOf(',') < 0 ?
		[args['cb-url']] :
		args['cb-url'].split(',');

	params.type                = args.type;
	params.display_name        = args['app-name'];
	params.client_id           = args.cid    || gen_random_str (24, 'hex', 'heimdallr.auth.com');
	params.client_secret       = args.secret || gen_random_str (32, 'hex');
	params.callback_url        = args['cb-url'];
	params.sso_req             = args.sso || [];
	params.grant_type          = [];
	params.respone_type        = [];
	params.contact             = args.contact;
	params.logo_uri            = args['logo-uri'] || [];
	params.scope               = [];
	params.trusted             = params.trusted_client;

	model.add_client (params, function (err, client) {
		if (err) {
			if (err.message)
				console.log (`${colors.red("error")} : ${err.message}`);
			else
				console.log (`${colors.red("error")} : ${err}`);

			process.exit (1);
		}

		console.log (colors.green(`client ${params.display_name} ${args.overwrite?"overwritten":"added"} ok`));
		console.log (JSON.stringify (client, null, 2));
		process.exit (0);
	});
});
